package ch.yvesguillo.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.List;
import java.util.Objects;

/**
 * Represents a command-line option parsed from a CLI schema JSON.
 *
 * Each {@code CliOption} corresponds to one logical argument (e.g., {@code --output}).
 * Fields are populated via Jackson from a JSON source, typically generated by Crawlect.
 */
public class CliOption {

    // Standard option fields.
    public String group;
    public List<String> flags;
    public String type;
    public List<String> choices;
    public boolean required;
    public String metavar;
    public String help;
    public String guitype;
    public String guilabel;
    public String guitooltip;

    // Make Jackson maps the Python keyword `default` to this field.
    @JsonProperty("default")
    public String defaultValue;

    // Derived fields.
    public boolean isBoolean;
    public boolean hasChoices;

    /**
     * Empty constructor required for Jackson.
     */
    public CliOption() {
    }

    /**
     * Performs post-processing to compute derived flags.
     *
     * Should be called after JSON deserialization.
     */
    public void postProcess() {
        this.isBoolean = flags.stream().anyMatch(f -> f.startsWith("--no-"));
        this.hasChoices = choices != null && !choices.isEmpty();
    }

    /**
     * Returns the primary long-form flag (e.g., {@code --output}).
     * Falls back to the first flag if none start with {@code --}.
     *
     * @return primary CLI flag.
     */
    public String getPrimaryFlag() {
        return flags.stream()
                .filter(f -> f.startsWith("--"))
                .findFirst()
                .orElse(flags.get(0));
    }

    /**
     * Returns the long-form negative flag (e.g., {@code --no-cache}) if it exists.
     *
     * @return negative flag or null.
     */
    public String getNegativeFlag() {
        return flags.stream()
                .filter(f -> f.startsWith("--no-"))
                .findFirst()
                .orElse(null);
    }

    /**
     * Returns the short-form flag (e.g., {@code -o}) if it exists.
     *
     * @return short CLI flag or empty string.
     */
    public String getShortFlag() {
        return flags.stream()
                .filter(f -> f.startsWith("-") && !f.startsWith("--"))
                .findFirst()
                .orElse("");
    }

    /**
     * Returns the CLI parameter metavar or fallback.
     * 
     * @return String.
     */
    public String getMetavar() {
        if (metavar.equals("")) {
            String fallback = getPrimaryFlag();
            return fallback;
        }
        return metavar;
    }

    /**
     * Returns the CLI parameter help or fallback.
     * 
     * @return String.
     */
    public String getHelp() {
        if (help.equals("")) {
            String fallback = getPrimaryFlag();
            return fallback;
        }
        return help;
    }

    /**
     * Returns the CLI parameter guitype or fallback.
     * 
     * @return String.
     */
    public String getGuitype() {
       return guitype;
    }

    /**
     * Returns the CLI parameter guilabel or fallback.
     * 
     * @return String.
     */
    public String getGuilabel() {
        if (guilabel.equals("")) {
            String fallback = getMetavar();
            return fallback;
        }
        return guilabel;
    }

    /**
     * Returns the CLI parameter guitooltip or fallback.
     * 
     * @return String.
     */
    public String getGuitooltip() {
        if (guitooltip.equals("")) {
            String fallback = getHelp();
            return fallback;
        }
        return guitooltip;
    }


    // Adapt standard methodes.

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        CliOption other = (CliOption) obj;
        return Objects.equals(getPrimaryFlag(), other.getPrimaryFlag());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPrimaryFlag());
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("[").append(getPrimaryFlag()).append("] ");

        if (group != null) builder.append("Group: ").append(group).append(", ");
        builder.append("Type: ").append(type).append(", ");
        builder.append("Required: ").append(required);

        if (defaultValue != null) {
            builder.append(", Default: ").append(defaultValue);
        }

        if (hasChoices && choices != null) {
            builder.append(", Choices: ").append(choices);
        }

        return builder.toString();
    }
}